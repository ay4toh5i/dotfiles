[[plungins]] # pgugin manager
repo = 'Shougo/dein.vim'
              
[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]] # color scheme
repo = 'altercation/vim-colors-solarized'

[[plugins]] # color scheme
repo = 'cocopon/iceberg.vim'

[[plugins]] # complete pairs
repo = 'tpope/vim-surround'

[[plugins]] # file system explorer
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeShowHidden = 1
'''

[[plugins]] # nerdtree plugin
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]] # nerdtree plugin
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # git plugin
repo = "airblade/vim-gitgutter"

[[plugins]] #  help to end
repo = 'tpope/vim-endwise'

[[plugins]] # git
repo = 'tpope/vim-fugitive'

[[plugins]] # help to tag end
repo = 'alvan/vim-closetag'
hook_add = '''
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.js,*.jsx,*.ts,*.tsx"
'''

[[plugins]] # create my vim cheatsheet
# :Cheat -> show cheatsheet
repo = 'reireias/vim-cheatsheet'
hook_add = '''
let g:cheatsheet#cheat_file = "~/cheatsheet.md"
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_settings_servers_dir = '~/lsp-servers'
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_text_edit_enabled = 1

command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

let g:lsp_highlight_references_enabled = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '⚠︎'}
let g:lsp_signs_information = {'text': '.'}
let g:lsp_sings_hint = {'text': '.'}
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 1
let g:asyncomplete_popup_delay = 200
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'source': 'rg --files --hidden --glob "!.git"'}), <bang>0)
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \           fzf#vim#with_preview(), <bang>0)

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
'''

[[plugins]] # statusline plugin
repo = 'itchyny/lightline.vim'
depends = [ 'lightline-iceberg' ]
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'iceberg',
      \ 'active': {
      \   'left':  [ [ 'nerdtree', 'mode', 'paste' ],
      \              [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ],
      \            ]
      \ },
      \   'inactive': {
      \     'left': [['nerdtree']],
      \     'right': [[]],
      \   },
      \ 'component_function': {
      \   'nerdtree': 'DescNERDTree',
      \   'lineinfo': 'LightlineLineinfo',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode'
      \ },
      \ 'component_visible_condition': {
      \   'lineinfo': '!IsNerdTree',
      \ },
      \ 'separator':    { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

  function! DescNERDTree()
    return IsNerdTree() ? 'NERDTree' : ''
  endfunction

  function! LightlineLineinfo()
    return !IsNerdTree() ? line('.') . ':' . col('.') : ''
  endfunction

  function! IsNerdTree()
    let fname = expand('%:t')
    return fname =~ 'NERD_tree_1'
  endfunction

	function! LightlineModified()
	  return &ft ==# 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
	endfunction

	function! LightlineReadonly()
	  return &ft !~? 'help' && &readonly && !IsNerdTree() ? 'RO' : ''
	endfunction

	function! LightlineFilename()
	  let fname = expand('%:t')
	  return fname ==# 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
	        \ fname =~# '^__Tagbar__\|__Gundo\|NERD_tree' ? '' :
	        \ &ft ==# 'vimfiler' ? vimfiler#get_status_string() :
	        \ &ft ==# 'unite' ? unite#get_status_string() :
	        \ &ft ==# 'vimshell' ? vimshell#get_status_string() :
	        \ (LightlineReadonly() !=# '' ? LightlineReadonly() . ' ' : '') .
	        \ (fname !=# '' ? fname : '[No Name]') .
	        \ (LightlineModified() !=# '' ? ' ' . LightlineModified() : '')
	endfunction

	function! LightlineFugitive()
	  try
	    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*FugitiveHead')
	      let mark = ''  " edit here for cool mark
	      let branch = FugitiveHead()
	      return branch !=# '' ? ''.branch : ''
	    endif
	  catch
	  endtry
	  return ''
	endfunction

	function! LightlineMode()
	  let fname = expand('%:t')
	  return fname =~# '^__Tagbar__' ? 'Tagbar' :
	        \ fname ==# 'ControlP' ? 'CtrlP' :
	        \ fname ==# '__Gundo__' ? 'Gundo' :
	        \ fname ==# '__Gundo_Preview__' ? 'Gundo Preview' :
	        \ &ft ==# 'unite' ? 'Unite' :
	        \ &ft ==# 'vimfiler' ? 'VimFiler' :
	        \ &ft ==# 'vimshell' ? 'VimShell' :
	        \ winwidth(0) > 60 ? lightline#mode() : ''
	endfunction

  function! LightlineFileformat()
	  return winwidth(0) > 70 ? &fileformat : ''
	endfunction

	function! LightlineFiletype()
	  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
	endfunction

	function! LightlineFileencoding()
	  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
	endfunction
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo =  'Lokaltog/vim-easymotion'

[[plugins]] # Auto close parentheses
repo = 'mattn/vim-lexiv'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = "has('nvim')"
merged = 0
on_lua = 'nvim-treesitter'
