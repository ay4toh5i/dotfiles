[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = [ 'mason.nvim' ]

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = [ 'mason.nvim', 'mason-lspconfig.nvim' ]
hook_post_source = '''
lua <<EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
end

local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}

require("mason").setup()
require("mason-lspconfig").setup()
require("mason-lspconfig").setup_handlers {
  function (server_name) -- default handler (optional)
    require("lspconfig")[server_name].setup {
        on_attach = on_attach,
        flags = lsp_flags,
      }
  end,
}
EOF
'''

[[plugins]]
repo = 'vim-skk/denops-skkeleton.vim'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)

call skkeleton#config({
\   'globalJisyo': '~/.config/skk/SKK-JISYO.L',
\ })
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
hook_add = '''
  call ddc#custom#patch_global('ui', 'native')
  call ddc#custom#patch_global('sources', ['skkeleton', 'nvim-lsp', 'around'])
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank']},
        \   'around': {
        \     'mark': 'around' 
        \   },
        \   'nvim-lsp': {
        \     'mark': 'lsp',
        \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
        \   }
        \   'skkeleton': {
        \     'mark': 'skk',
        \     'matchers': ['skkeleton'],
        \     'sorters': [],
        \     'minAutoCompleteLength': 2,
        \     'isVolatile': v:true,
        \   },
        \ })

  call ddc#custom#patch_global('sourceParams', #{
      \   nvim-lsp: #{
      \     snippetEngine: denops#callback#register({
      \           body -> vsnip#anonymous(body)
      \     }),
      \     enableResolveItem: v:true,
      \     enableAdditionalTextEdit: v:true,
      \   }
      \ })
  call ddc#enable()
'''
hook_post_source = '''
lua <<EOF
  local capabilities = require("ddc_nvim_lsp").make_client_capabilities()
  require("lspconfig").denols.setup({
    capabilities = capabilities,
  })
EOF
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'

[[plugins]]
repo = 'Shougo/ddc-around'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
depends = ['ddc.vim']

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_add = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_add = '''
call popup_preview#enable()
'''

[[plugins]] # lsp textEdit integration
repo = 'hrsh7th/vim-vsnip'
